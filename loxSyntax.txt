Comments:
// uses two slashes for comments

Print:
print "Hello, World!"; // Doesn't use brackets for internal things


Data Types:

 - Booleans
true; // Not false
false; // Not *not* false

 - Numbers
1234; // An integer
12.34; // A decimal number

 - Strings
"Test string";
""; // Empty string
"123"; // A string, not a number

 - Nil
nil; // no value, null


Arithmetic:

+
-
*
/
-negate


Comparison and equality:

less < than;
lessThan <= orEqual;
greater > than;
greaterThan >= or Equal;

1 == 2; // false
"a" != "b"; // true

123 == "123"; // false, values of different types are never equivalent


Logical operators: (or how/why you can write python code that reads almost identical to english)

!true; // false
!false; // true

true and false; // false
true and true; // true
false and false; // true

false or false; // false
true or false; // true


Precedence and grouping:
You can use () to group things and use them like parentheses in maths.



Statements

{
    print "One statement";
    print "two statements";
}


Variables:

var x = "strings"; // variables are defined with 'var'
var iAmNill; // an empty variable automatically evaluates to nil

var y = "ahahahaha";
print y; // "ahahahaha"
y = "ebebebebebe";
print y; // "ebebebebebe"



Control Flow

if (condition) {
    print "yes";
} else {
    print "no";
}

var a = 1;
while (a < 10) {
    print a;
    a = a + 1;
}

for (var a = 1; a < 10; a = a + 1) {
    print a;
}



Functions

IAmAFunction(arg1, arg2, arg3);
IAmAFunction();

fun printSum(a, b) { // functions are defined with 'fun'
    print a + b;
    // if there is no return then it returns nil
}


fun addPair(a, b) {
    return a + b;
}

fun identity(a) {
    return a;
}

print identity(addPair)(1, 2); // prints 3 through magic and unnessisary complexity


fun outerFunc() {
    fun localFunc() {
        print "I'm local!";
    }

    localFunc();
}